initial ui test
     binding.btnClear.setOnClickListener {
            binding.clTop.setBackgroundColor(Color.parseColor("#007ac1"))
            binding.apply {
                textView.setText("Clear")
                ivCloud.visibility = View.INVISIBLE
                ivNight.visibility = View.INVISIBLE
                textView.visibility = View.VISIBLE
                ivSun.visibility = View.VISIBLE
            }
        }


        binding.btnCloudy.setOnClickListener {
            binding.clTop.setBackgroundColor(Color.parseColor("#62757f"))
            binding.apply {
                textView.setText("Cloudy")
                textView.visibility = View.VISIBLE
                ivCloud.visibility = View.VISIBLE
                ivSun.visibility = View.INVISIBLE
                ivNight.visibility = View.INVISIBLE
            }
        }

        binding.btnNight.setOnClickListener {
            binding.clTop.setBackgroundColor(Color.parseColor("#000051"))
            binding.apply {
                textView.setText("Clear")
                textView.visibility = View.VISIBLE
                ivCloud.visibility = View.INVISIBLE
                ivSun.visibility = View.INVISIBLE
                ivNight.visibility = View.VISIBLE
            }
        }

    }

    ---------------- xml for ui test
        <androidx.constraintlayout.widget.ConstraintLayout
            android:id="@+id/cl_top"
            android:layout_width="match_parent"
            android:layout_height="300dp"
            android:background="@color/black"
            app:layout_constraintTop_toTopOf="parent">

            <ImageView
                android:id="@+id/iv_sun"
                android:layout_width="100dp"
                android:layout_height="100dp"
                android:visibility="invisible"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                app:srcCompat="@drawable/sun" />

            <ImageView
                android:id="@+id/iv_cloud"
                android:layout_width="100dp"
                android:layout_height="100dp"
                android:visibility="invisible"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                app:srcCompat="@drawable/cloudy" />

            <ImageView
                android:id="@+id/iv_night"
                android:layout_width="100dp"
                android:layout_height="100dp"
                android:visibility="gone"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                app:srcCompat="@drawable/moon" />

            <TextView
                android:id="@+id/textView"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Clear"
                android:visibility="invisible"
                android:textColor="@color/white"
                android:textSize="24sp"
                android:textStyle="bold"
                app:layout_constraintBottom_toBottomOf="@id/iv_sun"
                app:layout_constraintStart_toEndOf="@+id/iv_sun"
                app:layout_constraintTop_toTopOf="@id/iv_sun" />
        </androidx.constraintlayout.widget.ConstraintLayout>

        <Button
            android:id="@+id/btn_clear"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="clear sky"
            android:layout_marginTop="36dp"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.5"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/cl_top" />

        <Button
            android:id="@+id/btn_cloudy"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="cloudy sky"
            android:layout_marginTop="36dp"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.5"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/btn_clear" />

        <Button
            android:id="@+id/btn_night"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Night Time"
            android:layout_marginTop="36dp"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.5"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/btn_cloudy" />


            -- fragment code --
            //            // Update the UI with the weather data
            //            // Use binding to access the views in your fragment layout
            //            binding.tvLocation.text = weatherData?.name
            //            binding.tvLat.text = "Lat = " +weatherData?.coord!!.lat.toString()
            //            binding.tvLon.text = "Lon = " +weatherData.coord.lon.toString()
            //
            //        }

                    //            binding.tvCurrentWeatherDescription.text = weatherData?.weather?.get(0)?.description
            //            val kelvinTemp = weatherData?.main!!.temp
            //            val fahrenheitTemp = kelvinTemp.let { (it - 273.15) * 9/5 + 32 }
            //            binding.tvCurrentTemperature.text = fahrenheitTemp.toInt().toString() + " \u00B0"
                    // ... update other views ...

            //        viewModel.sunriseTime.observe(viewLifecycleOwner) { sunriseTime ->
            //            Log.i("DOH!", "Sunrise Time: $sunriseTime")
            //        }

            //        viewModel.weatherData.observe(viewLifecycleOwner) { weatherResponse ->
            //            if (weatherResponse != null) {
            //                Log.i("DOH!", "Output is $weatherResponse")
            //            } else {
            //                Log.i("DOH!", "Failed to receive weather data or empty response")
            //            }
            //        }

            //            binding.tvCurrentWeatherDescription.text = weatherData?.weather?.get(0)?.description
            //            val kelvinTemp = weatherData?.main!!.temp
            //            val fahrenheitTemp = kelvinTemp.let { (it - 273.15) * 9/5 + 32 }
            //            binding.tvCurrentTemperature.text = fahrenheitTemp.toInt().toString() + " \u00B0"
                            // ... update other views ...



           //    private fun checkLocationPermissionsAndStartUpdates() {
           //        if (!isLocationEnabled()) {
           //            showToast("Your location provider is turned off, please turn it on")
           //            openLocationSettings()
           //        } else {
           //            requestLocationPermissions()
           //        }
           //    }

           //    private fun requestLocationPermissions() {
           //        Dexter.withContext(requireContext())
           //            .withPermissions(
           //                Manifest.permission.ACCESS_FINE_LOCATION,
           //                Manifest.permission.ACCESS_COARSE_LOCATION
           //            )
           //            .withListener(object : MultiplePermissionsListener {
           //                // Handle permissions callback as before
           //                // ...
           //                override fun onPermissionsChecked(report: MultiplePermissionsReport?) {
           //                    if (report?.areAllPermissionsGranted() == true) {
           //                        // Get the current location using the LocationRepository
           //                        locationRepository.getCurrentLocation { latitude, longitude ->
           //                            // Use the latitude and longitude to fetch the weather data
           //                            getLocationWeatherDetails(latitude, longitude)
           //                        }
           //                    }
           //                }
           //            })
           //            .onSameThread()
           //            .check()
           //    }

               private fun getLocationWeatherDetails(latitude: Double, longitude: Double) {
                   viewModel.fetchWeatherData(latitude, longitude)
                   // TODO: Implement fetching weather details using the provided latitude and longitude
               }




            ----------------------------------------


            kinda cool transparent background
            <?xml version="1.0" encoding="utf-8"?>
            <shape xmlns:android="http://schemas.android.com/apk/res/android">
                <solid android:color="#80000000" /> <!-- 80% black with some transparency (adjust as needed) -->
                <corners android:radius="4dp" /> <!-- Add rounded corners if you prefer -->
            </shape>
